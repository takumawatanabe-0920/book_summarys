{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,aAAa;AACb,uBAAuB;AACvB,OAAO,OAAO,MAAM,SAAS,CAAA;AAC7B,OAAO,IAAI,MAAM,MAAM,CAAA;AACvB,OAAO,UAAU,MAAM,aAAa,CAAA;AAEpC,uBAAuB;AACvB,OAAO,KAAK,MAAM,gBAAgB,CAAA;AAElC,OAAO,iBAAiB,MAAM,mCAAmC,CAAA;AAEjE,aAAa;AACb,IAAM,GAAG,GAAG,OAAO,EAAE,CAAA;AACrB,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAA;AACf,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAA;AAClD,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAA;AAE1B,uBAAuB;AACvB,KAAK,CAAC,aAAa,CAAC;IAClB,UAAU,EAAE,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;IACpE,WAAW,EAAE,0CAA0C;CACxD,CAAC,CAAA;AAEF,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;AAElB,aAAa;AACb,8CAA8C;AAC9C,0BAA0B;AAC1B,oBAAoB;AACpB,UAAU;AACV,mBAAmB;AACnB,2BAA2B;AAC3B,mCAAmC;AACnC,aAAa;AACb,uBAAuB;AACvB,wBAAwB;AACxB,+BAA+B;AAC/B,4BAA4B;AAC5B,WAAW;AACX,iCAAiC;AACjC,SAAS;AACT,KAAK;AAEL,iCAAiC;AACjC,wDAAwD;AACxD,mEAAmE;AACnE,2CAA2C;AAC3C,6CAA6C;AAC7C,4BAA4B;AAC5B,wBAAwB;AACxB,2BAA2B;AAC3B,yBAAyB;AACzB,kBAAkB;AAClB,SAAS;AACT,oBAAoB;AACpB,+BAA+B;AAC/B,SAAS;AACT,KAAK;AAEL,cAAc;AACd,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAA;AACrD,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,cAAY,CAAC,CAAC,CAAA","sourcesContent":["// [index.js]\n// Expressと関連プラグインも読み込む\nimport express from \"express\"\nimport cors from \"cors\"\nimport bodyParser from \"body-parser\"\n\n// firebaseAdminを読み込みます\nimport admin from \"firebase-admin\"\nimport * as firebaseTools from \"firebase-tools\"\nimport serviceAccountKey from \"./firebase/serviceAccountKey.json\"\n\n// Expressの拡張\nconst app = express()\napp.use(cors())\napp.use(bodyParser.urlencoded({ extended: true }))\napp.use(bodyParser.json())\n\n// Firebase Adminの初期化処理\nadmin.initializeApp({\n  credential: admin.credential.cert(JSON.stringify(serviceAccountKey)),\n  databaseURL: \"https://pizza-planet-0920.firebaseio.com\"\n})\n\nconsole.log(admin)\n\n// ここからサーバの処理\n// app.post(\"/getClosedGroup\", (req, res) => {\n//   console.log(req.body)\n//   // 削除済みのグループを取得\n//   admin\n//     .firestore()\n//     .collection(\"rooms\")\n//     .where(\"droped\", \"==\", true)\n//     .get()\n//     .then(rooms => {\n//       const list = []\n//       rooms.forEach(doc => {\n//         list.push(doc.id)\n//       })\n//       res.json({ list: list })\n//     })\n// })\n\n// // 例えばこれは指定されたグループIDを削除するプログラム\n// // 削除するグループIDなどのパラメータはフロントから受けとり、req.body.変数名 に格納されます\n// // なお、firebaseTools.firestore.delete を使うことでサブコレクションも含めて削除してくれます。\n// app.post(\"/deleteGroup\", (req, res) => {\n//   console.log(\"削除するグループ\", req.body.roomId)\n//   firebaseTools.firestore\n//     .delete(`test`, {\n//       project: \"xxxxxx\",\n//       recursive: true,\n//       yes: true\n//     })\n//     .then(() => {\n//       res.json({ state: 1 })\n//     })\n// })\n\n// サーバーを起動する部分\nconsole.log(\"Webサーバが起動しました。localhost:3000からアクセス可能です\")\napp.listen(3000, function() {})\n"]}